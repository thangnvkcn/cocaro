/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.server;


import controller.UserDAO;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Room;
import model.User;

/**
 *
 * @author Admin
 */
public class Main extends javax.swing.JFrame {

    static public ArrayList<ClientHandler> listClient;
    
    static public ArrayList<Room> listRoom;

    List<User> uslist = new ArrayList<User>();
    DefaultTableModel tblUsers = new DefaultTableModel();
    static UserDAO userDAO = new UserDAO();
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        tblUsers = (DefaultTableModel) tbl_users.getModel();
        this.setSize(500, 500);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bt_refresh = new javax.swing.JButton();
        bt_update = new javax.swing.JButton();
        bt_add = new javax.swing.JButton();
        bt_del = new javax.swing.JButton();
        btn_bxh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_users = new javax.swing.JTable();
        btn_Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        bt_refresh.setText("Refresh");
        bt_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_refreshActionPerformed(evt);
            }
        });

        bt_update.setText("Update");
        bt_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_updateActionPerformed(evt);
            }
        });

        bt_add.setText("Add");
        bt_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_addActionPerformed(evt);
            }
        });

        bt_del.setText("Delete");
        bt_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_delActionPerformed(evt);
            }
        });

        btn_bxh.setText("Bảng xếp hạng");
        btn_bxh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bxhActionPerformed(evt);
            }
        });

        jLabel1.setText("THÔNG TIN NGƯỜI CHƠI");

        tbl_users.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Password", "Win", "Lose", "Score"
            }
        ));
        tbl_users.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_usersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_users);

        btn_Exit.setText("Exit");
        btn_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(bt_add, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_del)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_refresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_bxh))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btn_Exit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_Exit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_add)
                    .addComponent(bt_del)
                    .addComponent(bt_update)
                    .addComponent(bt_refresh)
                    .addComponent(btn_bxh))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_refreshActionPerformed
        // TODO add your handling code here:
        Refresh();
        
    }//GEN-LAST:event_bt_refreshActionPerformed

    private void bt_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_updateActionPerformed
        // TODO add your handling code here:
        int indx = tbl_users.getSelectedRow();
        if(indx == -1)
        {
            JOptionPane.showMessageDialog(null, "Xin hãy click chọn 1 user để cập nhật!", "Err", 1);
            return;
        }
        User us;
        us = uslist.get(indx);

        UpdateUser up = new UpdateUser(us,userDAO);
        up.setVisible(true);
        Refresh();
        
    }//GEN-LAST:event_bt_updateActionPerformed

    public void Refresh(){
        uslist = userDAO.getUserList();
        tblUsers.getDataVector().removeAllElements();
        for (User u : uslist) {
            tblUsers.addRow(new Object[]{
                  u.getId(), u.getUsername(),u.getPassword(), u.getWin(), u.getLose(), u.getScore()
             });
        }
    }
    private void bt_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_addActionPerformed
        // TODO add your handling code here:
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddUser au = new AddUser(userDAO);
                au.setVisible(true);
            }
        });
        Refresh();
    }//GEN-LAST:event_bt_addActionPerformed

    private void bt_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_delActionPerformed
        // TODO add your handling code here:
        int indx = tbl_users.getSelectedRow();
        if(indx == -1)
        {
            JOptionPane.showMessageDialog(null, "Xin hãy click chọn 1 user để xóa!", "Err", 1);
            return;
        }
        User us;
        us = uslist.get(indx);
        try {
            userDAO.DeleteUser(us.getId());
            JOptionPane.showMessageDialog(null, "User "+ us.getId()+" đã được xóa!", "Success", 1);
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Refresh();

    }//GEN-LAST:event_bt_delActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         uslist = userDAO.getUserList();
        tbl_users.removeAll();
         for(User u : uslist){
             tblUsers.addRow(new Object[]{
                  u.getId(), u.getUsername(),u.getPassword(), u.getWin(), u.getLose(), u.getScore()
             });
         }               
    }//GEN-LAST:event_formWindowOpened

    private void btn_bxhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bxhActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Scoreboard sb = new Scoreboard();
                sb.setVisible(true);
            }
        });
    }//GEN-LAST:event_btn_bxhActionPerformed

    private void tbl_usersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_usersMouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_tbl_usersMouseClicked

    private void btn_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExitActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(null,"Bạn có muốn đóng server không?","close",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
        if(x==JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_btn_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("SERVER");
                ServerListener server;
                
                try {
                    server = new ServerListener();
                    server.start();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                listClient = new ArrayList<ClientHandler>();
                listRoom = new ArrayList<Room>();
                for (int i=0; i<10; i++)
                {
                    Room temp = new Room(i);
                    listRoom.add(temp);
                    
                    
                }
                
                new Main().setVisible(true);
            }
        });
    }
    
    static class ServerListener extends Thread {
        //khai báo 1 ServerSocker
        private ServerSocket serverSocket;
        
        ServerListener() throws IOException {
            //Khởi tạo với 1 port để kết nối
            serverSocket =new  ServerSocket(9999);
        }
        @Override
        public void run() {
            while (true) {
                try {
                    //Server chấp nhận kết nối của client
                    final Socket socketToClient = serverSocket.accept();
                    //Khai báo và khởi tạo 1 đối tượng clientHandel cho thực phép các xử lý của server khi có 1 client kết nối đến
                    ClientHandler clientHandler = new ClientHandler(socketToClient);
                    //Thêm client vào l danh sách client
                    listClient.add(clientHandler);
                    System.out.println("Server: " + socketToClient.getInetAddress() + " is connecting");
                    System.out.println(socketToClient.getPort());
                    //Khởi chạy 1 luồng xử lý cho client
                    clientHandler.start();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_add;
    private javax.swing.JButton bt_del;
    private javax.swing.JButton bt_refresh;
    private javax.swing.JButton bt_update;
    private javax.swing.JButton btn_Exit;
    private javax.swing.JButton btn_bxh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_users;
    // End of variables declaration//GEN-END:variables
}
