/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.client;


import controller.UserDAO;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.Message;
import model.User;
import view.server.Scoreboard;

/**
 *
 * @author Admin
 */
public class RoomFrame extends javax.swing.JFrame implements inReceiveMessage{
    ListenServer listenServer;
    public List<User> listUser = new ArrayList<User>();
    static UserDAO userDAO = new UserDAO();
    /**
     * Creates new form RoomFrame
     */
    public RoomFrame(ListenServer listenServer) {
        initComponents();
        
        setLocationRelativeTo(null);
        this.listenServer = listenServer;
        this.listenServer.receive = this;
        
        try {
            listenServer.SendMessage(21, null);
        } catch (IOException ex) {
            Logger.getLogger(RoomFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnJoinRoom = new javax.swing.JButton();
        lstRoom = new java.awt.List();
        btn_bxh = new javax.swing.JButton();
        btn_Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Danh sách phòng");
        setBackground(new java.awt.Color(0, 204, 255));

        jButton1.setText("Refesh");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        btnJoinRoom.setText("Join Room");
        btnJoinRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnJoinRoomMouseClicked(evt);
            }
        });
        btnJoinRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinRoomActionPerformed(evt);
            }
        });

        btn_bxh.setText("Bảng xếp hạng");
        btn_bxh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bxhActionPerformed(evt);
            }
        });

        btn_Exit.setText("Exit");
        btn_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lstRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(btnJoinRoom)
                        .addGap(27, 27, 27)
                        .addComponent(btn_Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(btn_bxh)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lstRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnJoinRoom)
                    .addComponent(btn_bxh)
                    .addComponent(btn_Exit))
                .addContainerGap(179, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        try {
            listenServer.SendMessage(21, null);
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton1MouseClicked

    private void btnJoinRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnJoinRoomMouseClicked
        // TODO add your handling code here:
        
        try {
            if (lstRoom.getSelectedIndex()>=0)
            {
                //gửi chỉ số dòng của phòng đến ClientHandel xu ly 
                listenServer.SendMessage(20, lstRoom.getSelectedIndex());
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnJoinRoomMouseClicked

    private void btnJoinRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnJoinRoomActionPerformed

    private void btn_bxhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bxhActionPerformed
        try {
            // TODO add your handling code here:
            listenServer.SendMessage(42,null);
        } catch (IOException ex) {
            Logger.getLogger(RoomFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_bxhActionPerformed

    private void btn_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExitActionPerformed
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(null,"Bạn có muốn thoát không?","close",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
        if(x==JOptionPane.YES_OPTION){
            this.dispose();
            new LoginForm().setVisible(true);
        }
    }//GEN-LAST:event_btn_ExitActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnJoinRoom;
    private javax.swing.JButton btn_Exit;
    private javax.swing.JButton btn_bxh;
    private javax.swing.JButton jButton1;
    private java.awt.List lstRoom;
    // End of variables declaration//GEN-END:variables

    @Override
    
    public void ReceiveMessage(Message msg) throws IOException {
        switch (msg.getType()) {
            case 20: // get ban co
            {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new Main(listenServer).setVisible(true);
                    }
                });
                this.dispose();
                break;
            }
            case 21: {
                lstRoom.removeAll();
                int[] arrRoom = (int[])msg.getContent();
                for (int i=0; arrRoom!=null && i<arrRoom.length; i++)
                {
                    lstRoom.add("Phòng " + (i+1) + ": " + arrRoom[i]+ " chỗ trống");
                }
                lstRoom.select(0);
                break;
            }
            //Khi phòng này đầy
            case 22: { 
                //cập nhật lại số chỗ lên bảng ds
                lstRoom.removeAll();
                int[] arrRoom = (int[])msg.getContent();
                for (int i=0; arrRoom!=null && i<arrRoom.length; i++)
                {
                    lstRoom.add("Phòng " + (i+1) + ": " + arrRoom[i]);
                }
//                lstRoom.select(0);
                JOptionPane.showMessageDialog(null, "Phòng này đã đủ người chơi, vui lòng chọn phòng khác!", "Error", 1);
                break;
            }
            case 42:{
                listUser = (ArrayList<User>) msg.getContent();
                listenServer.listUser = listUser;
                 java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                        
                            new Scoreboard(listenServer,listUser).setVisible(true);
                        }
                    });
                break;
            }
        }
    }
}
